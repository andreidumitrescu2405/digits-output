copy con filename (creates new file)
mkdir foldername (creates new folder)

3 stages of git
-Untracked: the file exists, but is not part of git's version control
-Staged: the file has been added to git's version control but changes have not been committed
-Committed: the change has been committed


Git Bash Commands:
git config --global user.name "fname lname"
git config --global user.email ""email address"


Steps for initialising project into github:
1. -cd folderproject
2. -git init (initialising git on the project)
3. -echo "# reponame" >> README.md (adds a readme file to the repository)
4. -git add .
5. -git commit -m "first commit"
6. -git remote add origin https://github.com/..
7. -git push -u origin master

git commit -a -m "add new vendor" (to move to the stage)
git push origin master

git log (prints the commits in cronological order, the most recent appearing first)
git log -number (shows number commits)
git log --oneline (brief details)
git log --stat (no of insertions and deletions per commit)
git log --patch (detailed commits)

git rm filename (removes a file, git stopped tracking the file but it needs to commit to apply the changes)
git rm --cached filename (git stopped tracking the file but didnt completely removed it)
git mv filename newfilename (modify name)

git checkout -b new_branch (create and check new branch, it started pointing to the new branch not to the master branch)
git checkout master (pointing to the master branch)

git add . \n git stash (to solve the overriding problem)

git merge new_branch (merges the new_branch and the master branch)

git reset --soft (will move the specific commit back into your staging area)
git reset --mixed / git reset (will move the specific commit back into your working directory)
git reset --hard (removes completely the commit)

git clone URL (in the current directory)

git branch - list all the branches
git checkout <branch-name> - switch to work in a different branch (-b)
git branch -m <oldbranch> <newbranch> (renames a branch)
git branch -d <branchname> (delete)
git branch -D <branchname> (force delete)
git checkout <target-branch> (the branch that we want to be merging to)
git merge <source-branch> (merges the source-branch to the target-branch)
git diff <branch1> <branch2> (get the differences between branches)
git cherry-pick <sha> (get the specific commit to master branch)
